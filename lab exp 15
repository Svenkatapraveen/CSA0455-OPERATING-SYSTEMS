#include <stdio.h>
#include <pthread.h>

pthread_mutex_t lock;

void* criticalSection(void* arg) {
    pthread_mutex_lock(&lock);  // Enter critical section
    printf("Thread %p is in critical section.\n", (void*)pthread_self());  // Print thread ID (cast to void* for proper printing)
    // Simulate work in the critical section (e.g., sleep, computation, etc.)
    pthread_mutex_unlock(&lock);  // Exit critical section
    return NULL;
}

int main() {
    pthread_t threads[5];
    
    // Initialize the mutex
    pthread_mutex_init(&lock, NULL);

    // Create 5 threads
    for (int i = 0; i < 5; i++) {
        pthread_create(&threads[i], NULL, criticalSection, NULL);
    }

    // Wait for all threads to finish
    for (int i = 0; i < 5; i++) {
        pthread_join(threads[i], NULL);
    }

    // Destroy the mutex
    pthread_mutex_destroy(&lock);

    return 0;
}
