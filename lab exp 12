#include <stdio.h>
#include <pthread.h>
#include <unistd.h>

#define NUM_PHILOSOPHERS 5

// Mutexes for the forks
pthread_mutex_t forks[NUM_PHILOSOPHERS];

// Function for philosopher's thinking and eating
void* philosopher(void* num) {
    int philosopher_id = *((int*)num);

    while (1) {
        // Thinking
        printf("Philosopher %d is thinking...\n", philosopher_id);
        sleep(2);  // Thinking for 2 seconds

        // Try to pick up the forks
        pthread_mutex_lock(&forks[philosopher_id]);          // Pick up left fork
        pthread_mutex_lock(&forks[(philosopher_id + 1) % NUM_PHILOSOPHERS]);  // Pick up right fork

        // Eating
        printf("Philosopher %d is eating...\n", philosopher_id);
        sleep(2);  // Eating for 2 seconds

        // Release the forks
        pthread_mutex_unlock(&forks[philosopher_id]);        // Release left fork
        pthread_mutex_unlock(&forks[(philosopher_id + 1) % NUM_PHILOSOPHERS]);  // Release right fork

        // Simulate thinking and eating cycle
    }
}

int main() {
    pthread_t threads[NUM_PHILOSOPHERS];
    int philosopher_ids[NUM_PHILOSOPHERS];

    // Initialize the mutexes for the forks
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_mutex_init(&forks[i], NULL);
    }

    // Create threads for each philosopher
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        philosopher_ids[i] = i;
        if (pthread_create(&threads[i], NULL, philosopher, &philosopher_ids[i]) != 0) {
            printf("Error creating thread for philosopher %d\n", i);
            return 1;
        }
    }

    // Wait for threads to finish (in this case, they will run indefinitely)
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_join(threads[i], NULL);
    }

    // Destroy the mutexes
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_mutex_destroy(&forks[i]);
    }

    return 0;
}
